<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[SHENJIEFENG'S BLOG]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://lawlietfans.github.io/"/>
  <updated>2015-11-15T09:47:40.914Z</updated>
  <id>http://lawlietfans.github.io/</id>
  
  <author>
    <name><![CDATA[SHENJIEFENG]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[基于github pages与hexo搭建一个独立博客]]></title>
    <link href="http://lawlietfans.github.io/2015/11/08/using-hexo-with-jekyll/"/>
    <id>http://lawlietfans.github.io/2015/11/08/using-hexo-with-jekyll/</id>
    <published>2015-11-08T09:08:22.000Z</published>
    <updated>2015-11-15T09:47:40.914Z</updated>
    <content type="html"><![CDATA[<p>原文地址：<a href="http://lawlietfans.github.io/2015/11/08/using-hexo-with-jekyll/">http://lawlietfans.github.io/2015/11/08/using-hexo-with-jekyll/</a><br>2015-11-15 theme update<br>原文备份到：<a href="http://lawlietfans.github.io/project-site-blogs/2015/11/08/using-hexo-with-jekyll/">http://lawlietfans.github.io/project-site-blogs/2015/11/08/using-hexo-with-jekyll/</a></p>
<p>介绍基于github pages搭建独立博客的博文已经有很多了，而本文旨在帮助读者了解基于github pages与hexo搭建一个独立博客的整体过程，顺便备忘。</p>
<p>在开始动手操作之前，我们应该了解</p>
<h1 id="1_什么是github_page？为什么要用hexo？">1 什么是github page？为什么要用hexo？</h1><p><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" title="搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门" target="_blank" rel="external">github Pages可以被认为是用户编写的、托管在github上的静态网页</a>,GitHub Pages分两种，一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>即<a href="https://pages.github.com/" target="_blank" rel="external">organization site和project site</a>.<br>不过官方目前不建议用二级域名，我们这里的例子也是属于organization site.</p>
<p>至于hexo，快速、简洁且高效的博客框架，文档完善，主题丰富</p>
<h1 id="2_配置organization_site">2 配置organization site</h1><p> 新增仓库：<a href="https://github.com/new" target="_blank" rel="external">https://github.com/new</a></p>
<pre><code>Repository name：github账号<span class="class">.github</span><span class="class">.io</span>
Description：随便输入点描述
public
Initialize this repository with <span class="tag">a</span> README
<span class="class">.gitignore</span> 选择初始的文件忽略，我选的java
Licenses：我选的NPL（GNU General Public License v2.<span class="number">0</span>）
配置
</code></pre><p>选择右侧操作区的settings</p>
<pre><code>选择Launch automatic page generator
输入一些基本说明，非必要
选择<span class="operator"><span class="keyword">Load</span> README.md
继续Continue <span class="keyword">to</span> layouts
选择模板（随便选个）
发布Publish page
此时进入<span class="keyword">settings</span>应该会有Your site <span class="keyword">is</span> published <span class="keyword">at</span> <span class="keyword">http</span>://username.github.io的条提示，访问一下，神奇吧！
如果<span class="number">404</span>，请检查你的仓库名或账号名，删除仓库重来，删除也是在<span class="keyword">settings</span>最底部</span>
</code></pre><p><a href="http://liuxing.info/2015/06/14/GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/#配置Pages" title="配置pages" target="_blank" rel="external">参考-详细</a></p>
<h1 id="3_本地准备工作">3 本地准备工作</h1><p><a href="http://git-scm.com/download/" target="_blank" rel="external">安装git</a><br>安装Node.JS</p>
<pre><code>安装完成后添加Path环境变量，使npm命令生效。新版已经会自动配置Path  
;C:<span class="command">\Program</span> Files<span class="command">\nodejs</span><span class="command">\node</span>_modules<span class="command">\npm</span>
</code></pre><p>安装Hexo</p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> hexo-cli -<span class="keyword">g</span>
npm <span class="keyword">install</span> hexo <span class="comment">--save</span>

#如果命令无法运行，可以尝试更换taobao的npm源
npm <span class="keyword">install</span> -<span class="keyword">g</span> cnpm <span class="comment">--registry=https://registry.npm.taobao.org</span>
#新建文件夹&lt;folder&gt;
cd &lt;folder&gt;
hexo init 
npm <span class="keyword">install</span></span>
</code></pre><p>运行</p>
<pre><code><span class="variable">$ </span>hexo g
<span class="variable">$ </span>hexo s
</code></pre><p>Git Bush或者Linux环境下terminal会提示输入<a href="http://0.0.0.0:4000" target="_blank" rel="external">http://0.0.0.0:4000</a>  查看自带landspace主题效果</p>
<p><a href="http://wsgzao.github.io/post/hexo-guide/" title="使用GitHub和Hexo搭建免费静态Blog" target="_blank" rel="external">参考-详细</a></p>
<h1 id="4_如何使用新主题，以Jekyll主题为例">4 如何使用新主题，以<a href="http://pinggod.com/" target="_blank" rel="external">Jekyll主题</a>为例</h1><p><a href="https://hexo.io/themes/" title="more themes" target="_blank" rel="external">hexo提供的更多主题</a>提供了丰富的主题可以选择，安装方法大同小异，其中包括一款黑色背景的，好了，就它了。</p>
<p>安装插件</p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> <span class="comment">--save hexo-renderer-jade hexo-generator-feed</span></span>
</code></pre><p>clone该主题到<code>&lt;folder&gt;/themes/jekyll</code>文件夹</p>
<pre><code>git <span class="keyword">clone</span> <span class="title">https</span>://github.com/pinggod/hexo-theme-jekyll.git themes/jekyll
</code></pre><p>修改<folder>/_config.yml的theme值</folder></p>
<p>添加feed属性</p>
<p>复制Demo.md到source/_post文件夹</p>
<p>本地运行预览</p>
<p>配置<a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">deploy属性</a></p>
<pre><code><span class="attribute">deploy</span>:
  <span class="attribute">type</span>: git
  <span class="attribute">repository</span>: 前面步骤在github建好的Repository的地址
  <span class="attribute">branch</span>: master
</code></pre><p>发布到远程    </p>
<pre><code><span class="title">hexo</span> d
</code></pre><p>最后就可以在yourname.github.io看到效果了    </p>
<p>个人觉得不错的其他主题：</p>
<ul>
<li><a href="http://jukezhang.com/2014/11/01/construct-blog-with-hexo&amp;&amp;gitcafe/#安装Jacman主题：" title="jacman主题" target="_blank" rel="external">jacman</a>    </li>
<li><a href="http://yangjian.me/workspace/introducing-pacman-theme/" title="pacman主题" target="_blank" rel="external">pacman</a></li>
</ul>
<p>常用命令总结</p>
<pre><code>hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="preprocessor"># 新建文章</span>
hexo <span class="keyword">new</span> page <span class="string">"about"</span> <span class="preprocessor"># 新建页面</span>
hexo generate <span class="preprocessor">#生成静态页面至public目录</span>
hexo <span class="keyword">server</span> <span class="preprocessor">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>
hexo deploy <span class="preprocessor">#将.deploy目录部署到GitHub</span>
hexo clean <span class="preprocessor"># 有时候配置没有立即生效需要删除cache</span>
</code></pre><h1 id="5_修改这个主题">5 修改这个主题</h1><h2 id="5-1_添加新文章">5.1 添加新文章</h2><pre><code>$ hexo new <span class="string">[layout]</span> &lt;title&gt;
</code></pre><p>Layout包括：post、page 和 draft</p>
<p>Hexo 默认以标题做为文件名称<code>:title.md</code>：</p>
<pre><code><span class="formula">$ hexo new test-2249
INFO  Created: e:<span class="command">\workspace</span><span class="command">\github</span><span class="command">\blog</span>-github<span class="command">\source</span><span class="command">\_</span>posts<span class="command">\test</span>-2249.md</span>
</code></pre><p>如果设为<code>:year-:month-:day-:title.md</code> </p>
<pre><code>$ hexo <span class="keyword">new</span> test-<span class="number">2247</span>
INFO  Created: e:\workspace\github\blog-github\source\_posts\<span class="number">2015</span>-<span class="number">11</span>-<span class="number">07</span>-test-<span class="number">224</span>
<span class="number">7.</span>md 
</code></pre><p>两者都自动生成title和date，但是后者更便于管理。    </p>
<h2 id="5-2_修改主页">5.2 修改主页</h2><p>首先对比主页<code>&lt;foldername&gt;/themes/jekyll/layout/index.jade</code>:</p>
<pre><code><span class="label">extends</span> _partial/layout

<span class="keyword">block </span>content
    <span class="preprocessor">include</span> _mixin/post
    +homePost()

<span class="keyword">block </span>extra
    <span class="preprocessor">include</span> _components/project
    <span class="preprocessor">include</span> _components/<span class="keyword">selfintro</span>
</code></pre><p>和归档页<code>&lt;foldername&gt;/themes/jekyll/layout/archive.jade</code>:</p>
<pre><code>extends _partial/layout

    block <span class="attribute">content</span>
        include _mixin/post
        +<span class="function"><span class="title">archivePost</span><span class="params">()</span></span>
        <span class="tag">aside</span><span class="class">.sidebar</span>
            include _sidebar/tag
            include _sidebar/post            
</code></pre><p>删掉index.jade中<code>include _components/project</code>这句就比较精简了。<br>主页样式变成<code>一篇新文章+个人介绍</code>，直接修改jekyll/_config.yml下<code>selfIntro:</code>部分并不能令人满意，这里直接修改<code>/layout/_components/selfintro.jade</code></p>
<pre><code><span class="tag">section</span><span class="class">.selfintro</span>
    <span class="class">.wrap</span><span class="class">.row-flex</span><span class="class">.row-flex-row</span><span class="class">.limit-width</span>
        <span class="class">.sign</span>
            <span class="function"><span class="title">img</span><span class="params">(src=<span class="string">"img/github.png"</span>, alt=<span class="string">""</span>)</span></span>
        <span class="class">.intro</span>
            <span class="keyword">if</span> theme<span class="class">.selfIntro</span><span class="class">.title</span>
                <span class="tag">h3</span><span class="class">.title</span>
                    != theme<span class="class">.selfIntro</span><span class="class">.title</span>
            <span class="keyword">else</span> 
                <span class="tag">h3</span><span class="class">.title</span> 超爽der
            <span class="keyword">if</span> theme<span class="class">.selfIntro</span><span class="class">.content</span>
                <span class="tag">p</span><span class="class">.content</span> 
                    != theme<span class="class">.selfIntro</span><span class="class">.content</span>
            <span class="keyword">else</span> 
                <span class="tag">p</span><span class="class">.content</span> 空空

            <span class="comment">// 默认的href都为空，填上链接</span>
            <span class="tag">ul</span><span class="class">.contact</span>
                <span class="tag">li</span> 
                    <span class="function"><span class="title">a</span><span class="params">(href=<span class="string">"https://github.com/lawlietfans"</span>)</span></span> GitHub
                <span class="tag">li</span>
                    <span class="function"><span class="title">a</span><span class="params">(href=<span class="string">"http://weibo.com/lawlietfans"</span>)</span></span> Weibo
</code></pre><p>接着再找一个合适的logo替换github.png就可以了（不用也行。。），logo背景透明才能和主题融合</p>
<p>see more: <a href="http://naltatis.github.io/jade-syntax-docs/" target="_blank" rel="external">Jade Syntax Documentatio</a></p>
<pre><code>Comments
<span class="comment">// single line comment</span>
<span class="comment">//- invisible single line comment</span>
</code></pre><h2 id="5-3_修改头部导航">5.3 修改头部导航</h2><p>从这里<code>/layout/_components/nav.jade</code>添加修改menu</p>
<pre><code>nav
    ul.nav-list
        li.nav-list-<span class="keyword">item</span>
            <span class="operator">a</span>.nav-link(href= theme.menu[<span class="string">'home'</span>] class=is_home() ? <span class="string">'active'</span> : <span class="string">''</span>)
                = __(<span class="string">'index.title'</span>)
        li.nav-list-<span class="keyword">item</span>
            <span class="operator">a</span>.nav-link(href= theme.menu[<span class="string">'blog'</span>] class= is_archive() || is_post() ? <span class="string">'active'</span> : <span class="string">''</span>)    
                = __(<span class="string">'archive.title'</span>)
        li.nav-list-<span class="keyword">item</span>
            <span class="operator">a</span>.nav-link(href= theme.menu[<span class="string">'rss'</span>])
                = __(<span class="string">'rss.title'</span>)
       <span class="comment"> //li.nav-list-item</span>
       <span class="comment"> //    a.nav-link(href= theme.menu['github'] target="_blank")    </span>
       <span class="comment"> //        = __('github.title')</span>
</code></pre><p>依个人口味酌情修改即可。除此之外，RSS插件<a href="http://wsgzao.github.io/post/hexo-guide/" title="使用GitHub和Hexo搭建免费静态Blog" target="_blank" rel="external">安装之后</a>本地预览是没效果的，一般部署之后过段时间才有效</p>
<h2 id="5-4_侧边栏">5.4 侧边栏</h2><p><code>layout/_sidebar/</code>包含post.jade、tag.jade、和toc.jade三个部件，理论上都可以添加到archive.jade</p>
<pre><code>extends _partial/layout

block <span class="attribute">content</span>
    include _mixin/post
    +<span class="function"><span class="title">archivePost</span><span class="params">()</span></span>
    <span class="tag">aside</span><span class="class">.sidebar</span>
        include _sidebar/tag
        include _sidebar/post
</code></pre><p>但是添加<code>include _sidebar/toc</code>之后会报错如下：</p>
<pre><code>Unhandled rejection <span class="string">TypeError:</span> <span class="string">e:</span>\workspace\github\blog-github\themes\jekyll\lay
out\_sidebar\toc.<span class="string">jade:</span><span class="number">1</span>
  &gt; <span class="number">1</span>| <span class="keyword">if</span> toc(page.content, {<span class="string">list_number:</span> <span class="literal">false</span>})
    <span class="number">2</span>|   h3 文章目录
    <span class="number">3</span>|   != list_tags({<span class="string">amount:</span> <span class="number">5</span>, <span class="string">show_count:</span> <span class="literal">false</span>})
    <span class="number">4</span>|            
</code></pre><p>有待达人解决</p>
<h2 id="5-5_最后如果使用这个主题有兴趣和问题希望到这里多多交流">5.5 最后如果使用这个主题有兴趣和问题希望到<a href="https://github.com/pinggod/hexo-theme-jekyll/issues" target="_blank" rel="external">这里</a>多多交流</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址：<a href="http://lawlietfans.github.io/2015/11/08/using-hexo-with-jekyll/">http://lawlietfans.github.io/2015/11/08/using-hexo-with-je]]>
    </summary>
    
      <category term="博客搭建与配置" scheme="http://lawlietfans.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://lawlietfans.github.io/2015/11/08/hello-world/"/>
    <id>http://lawlietfans.github.io/2015/11/08/hello-world/</id>
    <published>2015-11-08T04:55:50.298Z</published>
    <updated>2015-11-08T04:55:50.298Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[辨析 Sass 中的 Map 和 List]]></title>
    <link href="http://lawlietfans.github.io/2015/10/21/official-demo/"/>
    <id>http://lawlietfans.github.io/2015/10/21/official-demo/</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2015-11-08T05:05:14.173Z</updated>
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>
<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>
<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>
<a id="more"></a>
<p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p>
<h2 id="测试表格">测试表格</h2><table>
<thead>
<tr>
<th>Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>site</code></td>
<td>Sitewide information.</td>
</tr>
<tr>
<td><code>page</code></td>
<td>Page specific information and custom variables set in front-matter.</td>
</tr>
<tr>
<td><code>config</code></td>
<td>Site configuration</td>
</tr>
<tr>
<td><code>theme</code></td>
<td>Theme configuration. Inherits from site configuration.</td>
</tr>
<tr>
<td><code>_</code> (single underscore)</td>
<td><a href="http://lodash.com/" target="_blank" rel="external">Lodash</a> library</td>
</tr>
<tr>
<td><code>path</code></td>
<td>Path of current page</td>
</tr>
<tr>
<td><code>url</code></td>
<td>Full URL of current page</td>
</tr>
<tr>
<td><code>env</code></td>
<td>Environment variables</td>
</tr>
</tbody>
</table>
<h2 id="语法比较">语法比较</h2><div class="note"><br>    <h5>测试标题</h5><br>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><br></div>

<h4 id="Map_语法">Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-map: (&#10;    small: (&#10;        min-width: null,&#10;        max-width: 479px,&#10;        base-font: 16px,&#10;        vertical-rhythm: 1.3&#10;    ),&#10;    medium: (&#10;        min-width: 480px,&#10;        max-width: 959px,&#10;        base-font: 18px,&#10;        vertical-rhythm: 1.414&#10;    ),&#10;    large: (&#10;        min-width: 960px,&#10;        max-width: 1099px,&#10;        base-font: 18px,&#10;        vertical-rhythm: 1.5&#10;    ),&#10;    xlarge: (&#10;        min-width: 1100px,&#10;        max-width: null,&#10;        base-font: 21px,&#10;        vertical-rhythm: 1.618&#10;    )&#10;);</span><br></pre></td></tr></table></figure>
<h4 id="多重列表语法">多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (&#10;    (small, null, 479px, 16px, 1.3),&#10;    (medium, 480px, 959px, 18px, 1.414),&#10;    (large, 960px, 1099px, 18px, 1.5),&#10;    (xlarge, 1100px, null, 21px, 1.618)&#10;);</span><br></pre></td></tr></table></figure>
<h2 id="遍历比较">遍历比较</h2><div class="note info"><br>    <h5>测试标题</h5><br>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><br></div>

<h4 id="遍历_Map">遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p>
<p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $map in $breakpoint-map &#123;&#10;    $min-width: map-get($map, min-width);&#10;    $max-width: map-get($map, max-width);&#10;    $base-font: map-get($map, base-font);&#10;    $vertical-rhythm: map-get($map, vertical-rhythm);&#10;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="遍历多重列表">遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p>
<p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="慎用多重列表">慎用多重列表</h2><div class="note warning"><br>    <h5>测试标题</h5><br>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><br></div>

<h4 id="遗漏键值">遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$breakpoint-list: (&#10;    (small, null, 479px, 16px, 1.3),&#10;    (medium, 480px, 959px, 18px, 1.414),&#10;    (large, 960px, 1099px, 18px, 1.5),&#10;    (xlarge, 1100px, 21px, 1.618)&#10;);&#10;&#10;p &#123;&#10;    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;&#10;        @if $min-width &#123;&#10;            @include breakpoint( $min-width ) &#123;&#10;                font-size: $base-font;&#10;                line-height: $vertical-rhythm;&#10;            &#125;&#10;        &#125; @else &#123;&#10;            font-size: $base-font;&#10;            line-height: $vertical-rhythm;&#10;        &#125;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p>
<p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p>
<h4 id="查找特定列表">查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure>
<p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@function get-list($label) &#123;&#10;    @each $list in $breakpoint-list &#123;&#10;        @if nth($list, 1) == $label &#123;&#10;            @return $list;&#10;        &#125;&#10;    &#125;&#10;    @return null;&#10;&#125;&#10;$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure>
<p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p>
<h4 id="缺少原生的_Map_函数">缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p>
<p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p>
<h2 id="总结">总结</h2><div class="note unreleased"><br>    <h5>Test Title</h5><br>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><br></div>

<p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p>
<p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p>
<p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p>]]>
    
    </summary>
    
      <category term="css" scheme="http://lawlietfans.github.io/tags/css/"/>
    
  </entry>
  
</feed>
